datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model SysSetting {
  id    String @id @default(cuid())
  key   String
  value String

  @@map("sys_setting")
}

model User {
  id        String   @id
  email     String
  password  String
  nickname  String
  avatar    String
  favor     String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  @@map("user")
}

model GitProvider {
  id           String  @id
  url          String
  type         String
  name         String
  disabled     Boolean
  privateToken String  @map("private_token")

  @@map("git_provider")
}

model BuildProvider {
  id      String  @id
  url     String
  type    String
  name    String
  default Boolean

  @@map("build_provider")
}

model Coverage {
  id                     String @id @default(cuid())
  sha                    String @map("sha")
  branch                 String
  compareTarget          String @map("compare_target")
  provider               String
  buildProvider          String @map("build_provider") // 通过侦测CI环境变量来判断
  buildID                String @map("build_id")
  projectID              String @map("project_id")
  reporter               String
  reportID               String @map("report_id") // 未来聚合的一句，区分case
  covType                String @map("cov_type") // 普通类型，all、agg
  // 代码覆盖率
  branchesTotal          Int    @map("branches_total")
  branchesCovered        Int    @map("branches_covered")
  functionsTotal         Int    @map("functions_total")
  functionsCovered       Int    @map("functions_covered")
  linesTotal             Int    @map("lines_total")
  linesCovered           Int    @map("lines_covered")
  statementsTotal        Int    @map("statements_total")
  statementsCovered      Int    @map("statements_covered")
  newlinesTotal          Int    @map("newlines_total")
  newlinesCovered        Int    @map("newlines_covered")
  changebranchesCovered  Int    @map("changebranches_covered")
  changebranchesTotal    Int    @map("changebranches_total")
  changefunctionsCovered Int    @map("changefunctions_covered")
  changefunctionsTotal   Int    @map("changefunctions_total")

  summary   Bytes
  // 代码覆盖率详情
  hit       Bytes
  // 通用
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(3)

  @@map("coverage")
}

model CoverageMap {
  id            String @id @default(cuid())
  provider      String
  repoID        String @map("repo_id")
  sha           String @map("sha")
  path          String
  map           Bytes
  // 如果是含有sourceMap的，需要instrumentCwd来做源码还原
  instrumentCwd String @map("instrument_cwd")

  // 再添加一个path索引
  @@index(fields: [path])
  @@index([repoID, sha]) // 联合索引
  @@map("coverage_map")
}

model Project {
  id                String @id
  name              String
  pathWithNamespace String @map("path_with_namespace")
  description       String
  bu                String
  tags              Json
  members           Json
  autoInstrument    Json?  @map("auto_instrument")
  coverage          String
  defaultBranch     String @map("default_branch")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(3)

  @@map("project")
}

model Codechange {
  id            String   @id @default(cuid())
  provider      String
  repoID        String   @map("repo_id")
  compareTarget String   @map("compare_target")
  sha           String   @map("sha")
  path          String
  additions     Int[]
  deletions     Int[]
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  @@map("codechange")
}

model Distributedlock {
  lockName       String    @id @map("lock_name")
  isLocked       Boolean   @default(false) @map("is_locked")
  lockTimestamp  DateTime? @map("lock_timestamp")
  lockExpiration DateTime? @map("lock_expiration")

  @@map("distributed_lock")
}

// 用于UT覆盖率
model UtCoverage {
  id                String   @id @default(cuid())
  sha               String   @map("sha")
  branch            String
  projectID         String   @map("project_id")
  // 代码覆盖率
  branchesTotal     Int      @map("branches_total")
  branchesCovered   Int      @map("branches_covered")
  functionsTotal    Int      @map("functions_total")
  functionsCovered  Int      @map("functions_covered")
  linesTotal        Int      @map("lines_total")
  linesCovered      Int      @map("lines_covered")
  statementsTotal   Int      @map("statements_total")
  statementsCovered Int      @map("statements_covered")
  newlinesTotal     Int      @map("newlines_total")
  newlinesCovered   Int      @map("newlines_covered")
  summary           Bytes
  // 代码覆盖率详情
  hit               Bytes
  // 数据源类型
  sourceType        String   @map("source_type")
  // 插桩路径
  instrumentCwd     String   @map("instrument_cwd")
  // 通用
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  @@map("ut_coverage")
}
