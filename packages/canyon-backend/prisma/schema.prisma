datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id           Int      @id
  username     String
  password     String
  nickname     String
  avatar       String
  refreshToken String   @map("refresh_token")
  accessToken  String   @map("access_token")
  email        String
  favor        String
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  @@map("reactor_user")
}

model Git {
  id                   String   @id @default(cuid())
  userID               String
  provider             String
  providerAccountId    String
  providerRefreshToken String
  providerAccessToken  String
  providerScope        String
  loggedIn             DateTime @default(now()) @db.Timestamp(3)

  @@map("reactor_git")
}

model GitProvider {
  id           String  @id
  url          String
  clientID     String
  clientSecret String
  type         String
  name         String
  disabled     Boolean

  @@map("reactor_git_provider")
}

model Coverage {
  id                String   @id @default(cuid())
  key               String // 防止重复插入
  sha               String   @map("sha")
  branch            String
  compareTarget     String   @map("compare_target")
  provider          String
  buildProvider     String   @map("build_provider") // 通过侦测CI环境变量来判断
  buildID           String   @map("build_id")
  projectID         String   @map("project_id")
  reporter          String
  reportID          String   @map("report_id") // 未来聚合的一句，区分case
  covType           String   @map("cov_type") // 普通类型，all、method、agg
  method            String // UI自动化 auto，手动 manual，ut 单元测试
  // 代码覆盖率
  branchesTotal     Int      @map("branches_total")
  branchesCovered   Int      @map("branches_covered")
  functionsTotal    Int      @map("functions_total")
  functionsCovered  Int      @map("functions_covered")
  linesTotal        Int      @map("lines_total")
  linesCovered      Int      @map("lines_covered")
  statementsTotal   Int      @map("statements_total")
  statementsCovered Int      @map("statements_covered")
  newlinesTotal     Int      @map("newlines_total")
  newlinesCovered   Int      @map("newlines_covered")
  // 通用
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt         DateTime @default(now()) @map("updated_at") @db.Timestamp(3)

  @@map("reactor_coverage")
}

model CovMapTest {
  id                           String @id
  mapJsonStr                   String @map("map_json_str")
  mapJsonStatementMapStartLine String @map("map_json_statement_map_start_line")
  projectID                    String @map("project_id")
  sha                          String
  path                         String

  @@map("reactor_cov_map_test")
}

model CovHit {
  id         String @id
  mapJsonStr String @map("map_json_str")

  @@map("reactor_cov_hit")
}

model Project {
  id                String   @id
  name              String
  pathWithNamespace String   @map("path_with_namespace")
  description       String
  bu                String
  tags              Json
  members           Json
  coverage          String
  language          String
  defaultBranch     String   @map("default_branch")
  instrumentCwd     String   @map("instrument_cwd")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  @@map("reactor_project")
}

model Codechange {
  id        String @id @default(cuid())
  projectID String @map("project_id")

  compareTarget String @map("compare_target")

  sha String @map("sha")

  path String

  additions Int[]

  deletions Int[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  @@map("reactor_codechange")
}

model Filepath {
  id        String @id @default(cuid())
  projectID String @map("project_id")
  sha       String @map("sha")
  path      String

  @@map("reactor_filepath")
}

model Distributedlock {
  lockName       String    @id
  isLocked       Boolean   @default(false)
  lockTimestamp  DateTime?
  lockExpiration DateTime?

  @@map("reactor_distributedlock")
}
