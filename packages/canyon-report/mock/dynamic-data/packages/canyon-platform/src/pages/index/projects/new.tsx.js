window["packages/canyon-platform/src/pages/index/projects/new.tsx"] = {"content":"import { useMutation } from \"@apollo/client\";\nimport { useRequest } from \"ahooks\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport {\n  CheckProjectUrlDocument,\n  CreateProjectDocument,\n} from \"../../../helpers/backend/gen/graphql.ts\";\nconst { Text } = Typography;\n\nconst LabelTest = ({ type, name, url, disabled }) => {\n  return (\n    <Space>\n      <img className={\"w-[20px]\"} src={`/gitproviders/${type}.svg`} alt=\"\" />\n      {name}\n      <Text type={\"secondary\"}>{url}</Text>\n    </Space>\n  );\n};\n\nconst App: React.FC = () => {\n  const { data: gitProviderList } = useRequest(() =>\n    axios.get(`/api/gitprovider`).then(({ data }) => data),\n  );\n  const [form] = Form.useForm();\n  const [createTodo, { data, loading }] = useMutation(CheckProjectUrlDocument);\n  const [createProject] = useMutation(CreateProjectDocument);\n  const [projectID, setProjectID] = useState(\"\");\n\n  const onFinish = (values: any) => {\n    const url = gitProviderList.find((i) => {\n      return i.id === values.provider;\n    }).url;\n\n    createTodo({\n      variables: {\n        projectUrl: `${url}/${values.repository}`,\n      },\n    }).then((res) => {\n      setProjectID(\n        `${values.provider}-${res.data?.checkProjectUrl.id}-${values.slug}`,\n      );\n    });\n  };\n\n  const nav = useNavigate();\n  const { t } = useTranslation();\n  return (\n    <div>\n      <h2>{t(\"projects.create\")}</h2>\n\n      <h3>1. {t(\"new.step1\")}</h3>\n      <Form\n        layout={\"vertical\"}\n        form={form}\n        name=\"control-hooks\"\n        onFinish={onFinish}\n        style={{ maxWidth: 600 }}\n        initialValues={{\n          slug: \"auto\",\n        }}\n      >\n        <Form.Item\n          name=\"provider\"\n          label={t(\"new.provider\")}\n          rules={[{ required: true }]}\n        >\n          <Select\n            placeholder={t(\"new.provider.placeholder\")}\n            allowClear\n            options={(gitProviderList || []).map(\n              ({ name, url, type, id, disabled }) => ({\n                label: (\n                  <LabelTest\n                    name={name}\n                    type={type}\n                    url={url}\n                    disabled={disabled}\n                  />\n                ),\n                value: id,\n                disabled: disabled,\n              }),\n            )}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"repository\"\n          label={t(\"new.repository\")}\n          rules={[{ required: true }]}\n        >\n          <Input placeholder={\"namespace/repo-name\"} />\n        </Form.Item>\n\n        <Form.Item\n          name=\"slug\"\n          label={t(\"projects.slug\")}\n          rules={[{ required: true, pattern: /^[a-zA-Z0-9]+$/ }]}\n          tooltip={<>{t(\"new.slug.tooltip\")}</>}\n        >\n          <Input placeholder={t(\"new.slug.placeholder\")} />\n        </Form.Item>\n\n        <Form.Item\n          name=\"language\"\n          label={t(\"common.language\")}\n          rules={[{ required: true }]}\n        >\n          <Select\n            placeholder={t(\"new.language.placeholder\")}\n            options={[\n              {\n                label: \"JavaScript\",\n                value: \"JavaScript\",\n              },\n            ]}\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type={\"primary\"}\n            onClick={() => {\n              form.submit();\n            }}\n          >\n            {t(\"new.check\")}\n          </Button>\n        </Form.Item>\n      </Form>\n\n      <h3>2. {t(\"new.step2\")}</h3>\n\n      <Spin spinning={loading}>\n        <div>\n          <Text>projectID:</Text>\n          <Text>{projectID}</Text>\n        </div>\n        <div>\n          <Text>pathWithNamespace:</Text>\n          <Text>{data?.checkProjectUrl.pathWithNamespace}</Text>\n        </div>\n        <div>\n          <Text>description:</Text>\n          <Text>{data?.checkProjectUrl.description}</Text>\n        </div>\n      </Spin>\n      <div className={\"h-2\"}></div>\n      <Button\n        type={\"primary\"}\n        disabled={!data?.checkProjectUrl.id}\n        onClick={() => {\n          createProject({\n            variables: {\n              projectID: projectID,\n              language: form.getFieldValue(\"language\"),\n            },\n          }).then((res) => {\n            message.success(JSON.stringify(res.data?.createProject));\n            nav(`/projects/${data?.checkProjectUrl.id}/getting-started`);\n          });\n        }}\n      >\n        {t(\"new.create\")}\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n","coverage":{"name":"zt"}}