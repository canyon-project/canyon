window["packages/canyon-platform/src/components/CanyonReport/ShikiDetail.tsx"] = {"content":"import { codeToHtml } from \"shiki\";\nimport { mergeIntervals } from \"./helper.tsx\";\n\nconst ShikiDetail = ({ defaultValue, filecoverage, theme }) => {\n  const [content, setContent] = useState(\"\");\n\n  const statementStats = filecoverage.s;\n  const statementMeta = filecoverage.statementMap;\n  const structuredText = defaultValue\n    .split(\"\\n\")\n    .reduce((previousValue, currentValue, currentIndex) => {\n      return {\n        ...previousValue,\n        [currentIndex]: currentValue,\n      };\n    }, {});\n  const statementDecorations = [];\n\n  Object.entries(statementStats).forEach(([stName, count]) => {\n    const meta = statementMeta[stName];\n    if (meta) {\n      const type = count > 0 ? \"yes\" : \"no\";\n      const startCol = meta.start.column;\n      let endCol = meta.end.column + 1;\n      const startLine = meta.start.line;\n      const endLine = meta.end.line;\n\n      if (type === \"no\" && structuredText[startLine]) {\n        if (endLine !== startLine) {\n          endCol = structuredText[startLine].length;\n        }\n        //     转化为字符的起始\n\n        let start = 0;\n        let end = 0;\n\n        for (let i = 0; i < startLine - 1; i++) {\n          start += structuredText[i].length + 1;\n        }\n        for (let i = 0; i < endLine - 1; i++) {\n          end += structuredText[i].length + 1;\n        }\n\n        start += startCol;\n        end += endCol;\n        statementDecorations.push([start, end]);\n      }\n    }\n  });\n\n  const fnDecorations = [];\n  const fnStats = filecoverage.f;\n  const fnMeta = filecoverage.fnMap;\n  Object.entries(fnStats).forEach(([fName, count]) => {\n    const meta = fnMeta[fName];\n    if (meta) {\n      const type = count > 0 ? \"yes\" : \"no\";\n      // Some versions of the instrumenter in the wild populate 'func'\n      // but not 'decl':\n      const decl = meta.decl || meta.loc;\n      const startCol = decl.start.column;\n      let endCol = decl.end.column + 1;\n      const startLine = decl.start.line;\n      const endLine = decl.end.line;\n\n      if (type === \"no\" && structuredText[startLine]) {\n        if (endLine !== startLine) {\n          endCol = structuredText[startLine].length;\n        }\n\n        //     转化为字符的起始\n\n        let start = 0;\n        let end = 0;\n\n        for (let i = 0; i < startLine - 1; i++) {\n          start += structuredText[i].length + 1;\n        }\n        for (let i = 0; i < endLine - 1; i++) {\n          end += structuredText[i].length + 1;\n        }\n\n        start += startCol;\n        end += endCol;\n        fnDecorations.push([start, end]);\n      }\n    }\n  });\n\n  codeToHtml(defaultValue, {\n    lang: \"javascript\",\n    theme: theme === \"light\" ? \"light-plus\" : \"tokyo-night\",\n    decorations: mergeIntervals(\n      [...statementDecorations, ...fnDecorations].filter((item) => {\n        // defaultValue\n        if (item[0] >= item[1]) {\n          return false;\n        } else if (item[1] > defaultValue.length) {\n          return false;\n        } else {\n          return item[0] < item[1];\n        }\n      }),\n    ).map(([start, end]) => {\n      return {\n        start,\n        end,\n        properties: { class: \"content-class-no-found\" },\n      };\n    }),\n  })\n    .then((res) => {\n      setContent(res);\n    })\n    .catch((err) => {\n      console.log(\"覆盖率着色失败\", err);\n      codeToHtml(defaultValue, {\n        lang: \"javascript\",\n        theme: theme === \"light\" ? \"light-plus\" : \"tokyo-night\",\n      }).then((r) => {\n        setContent(r);\n      });\n    });\n  return (\n    <div className={\"px-[12px] overflow-x-auto w-full\"}>\n      <div dangerouslySetInnerHTML={{ __html: content }}></div>\n    </div>\n  );\n};\n\nexport default ShikiDetail;\n","coverage":{"name":"zt"}}