window["packages/canyon-platform/src/components/CanyonReport/TreeTable.tsx"] = {"content":"import { FileOutlined, FolderFilled } from \"@ant-design/icons\";\n\nimport { getCOlor, percent } from \"../../helpers/utils/common.ts\";\nimport { checkSuffix } from \"./helper.tsx\";\n\nconst CanyonReportTreeTable = ({\n  dataSource,\n  loading,\n  activatedPath,\n  onSelect,\n  onlyChange,\n}) => {\n  const { t } = useTranslation();\n  const newlinesColumns = onlyChange\n    ? [\n        {\n          title: t(\"projects.newlines\"),\n          width: \"200px\",\n          sorter: (a, b) => {\n            return a.summary.newlines.pct - b.summary.newlines.pct;\n          },\n          dataIndex: [\"summary\", \"newlines\", \"total\"],\n          render(text, record) {\n            return (\n              <Space>\n                <Progress\n                  percent={record.summary.newlines.pct}\n                  strokeLinecap=\"butt\"\n                  size={\"small\"}\n                  style={{ width: \"100px\" }}\n                  strokeColor={getCOlor(record.summary.newlines.pct)}\n                  className={\"pr-5\"}\n                  status={\"normal\"}\n                />\n                <span style={{ fontSize: \"10px\" }}>\n                  ({record.summary.newlines.covered}/\n                  {record.summary.newlines.total})\n                </span>\n                {/*{record.summary.newlines.covered}%*/}\n              </Space>\n            );\n          },\n        },\n      ]\n    : [];\n  // const newlinesColumns = [];\n  return (\n    <div>\n      <ConfigProvider\n        theme={{\n          token: {\n            borderRadius: 0,\n          },\n        }}\n      >\n        <Table\n          loading={loading}\n          bordered={true}\n          pagination={false}\n          size={\"small\"}\n          // children={false}\n          dataSource={dataSource}\n          // onRow={(record, rowIndex) => {\n          //   return {\n          //     onClick: (event) => {\n          //       console.log(record);\n          //       onSelect(record);\n          //     }, // click row\n          //   };\n          // }}\n          columns={[\n            {\n              title: t(\"projects.detail.files\"),\n              key: \"path\",\n              dataIndex: \"path\",\n              render(text, record) {\n                return (\n                  <a\n                    className={\"flex gap-1\"}\n                    onClick={() => {\n                      onSelect(record);\n                    }}\n                  >\n                    {text.includes(\".\") && checkSuffix(text) ? (\n                      <FileOutlined style={{ fontSize: \"16px\" }} />\n                    ) : (\n                      <FolderFilled style={{ fontSize: \"16px\" }} />\n                    )}\n                    {text.split(\"/\").at(-1)}\n                  </a>\n                );\n              },\n            },\n\n            {\n              title: t(\"common.total\"),\n              key: \"total\",\n              dataIndex: [\"summary\", \"statements\", \"total\"],\n              sorter(a, b) {\n                return a.summary.statements.total - b.summary.statements.total;\n              },\n            },\n            {\n              title: t(\"common.covered\"),\n              key: \"covered\",\n              dataIndex: [\"summary\", \"statements\", \"covered\"],\n              sorter(a, b) {\n                return (\n                  a.summary.statements.covered - b.summary.statements.covered\n                );\n              },\n            },\n          ]\n            .concat(newlinesColumns)\n            .concat([\n              {\n                title: t(\"projects.config.coverage\") + \" %\",\n                width: \"300px\",\n                key: \"c\",\n                dataIndex: [\"summary\", \"statements\", \"pct\"],\n                sorter(a, b) {\n                  return a.summary.statements.pct - b.summary.statements.pct;\n                },\n                render(text) {\n                  return (\n                    <Progress\n                      percent={text}\n                      strokeLinecap=\"butt\"\n                      size={\"small\"}\n                      strokeColor={getCOlor(text)}\n                      className={\"pr-5\"}\n                      status={\"normal\"}\n                    />\n                  );\n                },\n              },\n            ])}\n        />\n      </ConfigProvider>\n    </div>\n  );\n};\n\nexport default CanyonReportTreeTable;\n","coverage":{"name":"zt"}}