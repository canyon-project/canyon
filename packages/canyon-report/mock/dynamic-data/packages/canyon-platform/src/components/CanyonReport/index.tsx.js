window["packages/canyon-platform/src/components/CanyonReport/index.tsx"] = {"content":"import { genSummaryTreeItem } from \"canyon-data\";\n\nimport CanyonReportControl from \"./Control.tsx\";\nimport CanyonReportCoverageDetail from \"./CoverageDetail.tsx\";\nimport { checkSuffix } from \"./helper.tsx\";\nimport CanyonReportListTable from \"./ListTable.tsx\";\nimport CanyonReportOverview from \"./Overview.tsx\";\nimport CanyonReportTreeTable from \"./TreeTable.tsx\";\n\nfunction checkSummaryOnlyChange(item, onlyChange) {\n  // 如果只看改变的为false，就返回全部\n  if (onlyChange === false) {\n    return true;\n  }\n  // 不然就检查item.change\n  if (onlyChange && item.change) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction checkSummaryKeywords(item, keywords) {\n  return item.path.toLowerCase().includes(keywords.toLowerCase());\n}\n\n// 1.summary最主要的数据，有外面传入\n// 2.当前默认defaultPath = sprm.get('path')，锚点\nconst CanyonReport = ({\n  // summary,\n  activatedPath,\n  pathWithNamespace,\n  coverageSummaryMapData,\n  loading,\n  onSelect,\n  mainData,\n  theme,\n}) => {\n  console.log(mainData, \"mainData\", theme);\n  // 几个状态\n  // 1.展示模式//tree||list\n  const [showMode, setShowMode] = useState(\"tree\");\n  // 2.当前是文件还是文件夹\n  const fMode = useMemo(() => {\n    // return 获取当前path，判断是否含有 .\n    return activatedPath.includes(\".\") && checkSuffix(activatedPath)\n      ? \"file\"\n      : \"folder\";\n  }, [activatedPath]);\n  // 3.是否只展示变更文件\n  // 4.其他的放在各自的状态里\n\n  // 5.文件路径关键字搜索\n  const [keywords, setKeywords] = useState(\"\");\n  const [onlyChange, setOnlyChange] = useState(false);\n\n  // useEffect(()=>{\n  //   document.querySelector(\"#nihao\").scrollIntoView(true);\n  // },[])\n\n  const coverageSummaryMapDataFiltered = useMemo(() => {\n    return coverageSummaryMapData.filter(\n      (item) =>\n        checkSummaryOnlyChange(item, onlyChange) &&\n        checkSummaryKeywords(item, keywords),\n    );\n  }, [coverageSummaryMapData, onlyChange, keywords]);\n\n  const summary = coverageSummaryMapDataFiltered.reduce(\n    (acc: any, cur: any) => {\n      acc[cur.path] = cur;\n      return acc;\n    },\n    {},\n  );\n  const summaryTreeItem = genSummaryTreeItem(activatedPath, summary);\n  console.log(summaryTreeItem, \"summaryTreeItem\");\n  function onChangeOnlyChangeKeywords(v) {\n    setKeywords(v.target.value);\n  }\n\n  function onChangeOnlyChange(v) {\n    // console.log(v,'v')\n    setOnlyChange(v);\n  }\n  function onChangeShowMode(mode) {\n    setShowMode(mode);\n  }\n  return (\n    <div>\n      <CanyonReportControl\n        showMode={showMode}\n        numberFiles={\n          coverageSummaryMapDataFiltered.filter((item) =>\n            item.path.includes(activatedPath),\n          ).length\n        }\n        keywords={keywords}\n        onlyChange={onlyChange}\n        onChangeOnlyChange={onChangeOnlyChange}\n        onChangeOnlyChangeKeywords={onChangeOnlyChangeKeywords}\n        onChangeShowMode={onChangeShowMode}\n      />\n      <Divider style={{ margin: \"0\", marginBottom: \"10px\" }} />\n      <CanyonReportOverview\n        summaryTreeItem={summaryTreeItem}\n        activatedPath={activatedPath}\n        pathWithNamespace={pathWithNamespace}\n        onSelect={onSelect}\n      />\n      {showMode === \"tree\" && fMode === \"folder\" && (\n        <CanyonReportTreeTable\n          onlyChange={onlyChange}\n          dataSource={summaryTreeItem.children}\n          loading={loading}\n          activatedPath={activatedPath}\n          onSelect={onSelect}\n        />\n      )}\n      {showMode === \"list\" && fMode === \"folder\" && (\n        <CanyonReportListTable\n          onlyChange={onlyChange}\n          onSelect={onSelect}\n          keywords={keywords}\n          loading={loading}\n          dataSource={coverageSummaryMapDataFiltered.filter((item) =>\n            item.path.includes(activatedPath),\n          )}\n        />\n      )}\n      <Spin spinning={!mainData && fMode === \"file\"}>\n        {fMode === \"file\" && mainData && (\n          <CanyonReportCoverageDetail\n            theme={theme}\n            data={{\n              coverage: mainData?.fileCoverage,\n              sourcecode: mainData?.fileContent,\n              newlines: mainData?.fileCodeChange,\n            }}\n          />\n        )}\n      </Spin>\n\n      <FloatButton.BackTop />\n    </div>\n  );\n};\n\nexport default CanyonReport;\n","coverage":{"name":"zt"}}